from rest_framework import viewsets
from .models import UserDetail
from .serializers import UserDetailSerializer
import openai
import json
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
import re

class UserViewSet(viewsets.ModelViewSet):
    queryset = UserDetail.objects.all()
    serializer_class = UserDetailSerializer
    
    # üîπ Kh·ªüi t·∫°o client OpenAI theo chu·∫©n m·ªõi nh·∫•t
client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)

@csrf_exempt
def summarize_text_hierarchical(request):
    """
    API nh·∫≠n vƒÉn b·∫£n d√†i t·ª´ request, g·ª≠i ƒë·∫øn OpenAI v√† tr·∫£ v·ªÅ JSON ph√¢n c·∫•p.
    H·ªó tr·ª£ 3 ch·∫ø ƒë·ªô t√≥m t·∫Øt: basic, normal, detailed.
    """
    if request.method != "POST":
        return JsonResponse({"error": "Invalid request method"}, status=400)

    try:
        # üîπ L·∫•y n·ªôi dung t·ª´ request
        data = json.loads(request.body)
        input_text = data.get("text", "").strip()
        mode = data.get("mode", "normal").strip().lower()  # Default: normal

        if not input_text:
            return JsonResponse({"error": "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n!"}, status=400)

        # üìå Ch·ªçn prompt t√πy theo ch·∫ø ƒë·ªô
        if mode == "basic":
            prompt = f"""
            H√£y t√≥m t·∫Øt n·ªôi dung sau theo c√°ch ng·∫Øn g·ªçn nh·∫•t, ch·ªâ gi·ªØ l·∫°i nh·ªØng √Ω ch√≠nh l·ªõn.
            
            N·ªôi dung:
            {input_text}
            
            Xu·∫•t ra JSON h·ª£p l·ªá v·ªõi ƒë·ªãnh d·∫°ng sau:
            ```json
            {{
              "title": "Ch·ªß ƒë·ªÅ ch√≠nh",
              "children": [
                {{"title": "√ù ch√≠nh 1"}},
                {{"title": "√ù ch√≠nh 2"}}
              ]
            }}
            ```
            """
        elif mode == "detailed":
            prompt = f"""
            H√£y t√≥m t·∫Øt n·ªôi dung sau m·ªôt c√°ch chi ti·∫øt, c√≥ ph√¢n c·∫•p ƒë·∫ßy ƒë·ªß, gi·∫£i th√≠ch t·ª´ng √Ω v√† ƒë∆∞a v√≠ d·ª• n·∫øu c·∫ßn.
            
            N·ªôi dung:
            {input_text}
            
            Xu·∫•t ra JSON h·ª£p l·ªá v·ªõi ƒë·ªãnh d·∫°ng sau:
            ```json
            {{
              "title": "Ch·ªß ƒë·ªÅ ch√≠nh",
              "children": [
                {{
                  "title": "√ù ch√≠nh 1",
                  "children": [
                    {{"title": "Gi·∫£i th√≠ch chi ti·∫øt 1"}},
                    {{"title": "V√≠ d·ª• 1"}}
                  ]
                }},
                {{
                  "title": "√ù ch√≠nh 2",
                  "children": [
                    {{"title": "Gi·∫£i th√≠ch chi ti·∫øt 2"}},
                    {{"title": "V√≠ d·ª• 2"}}
                  ]
                }}
              ]
            }}
            ```
            """
        else:  # Default: normal
            prompt = f"""
            H√£y t√≥m t·∫Øt n·ªôi dung sau theo d·∫°ng ph√¢n c·∫•p, ƒë·∫ßy ƒë·ªß nh∆∞ng kh√¥ng qu√° chi ti·∫øt.
            
            N·ªôi dung:
            {input_text}
            
            Xu·∫•t ra JSON h·ª£p l·ªá v·ªõi ƒë·ªãnh d·∫°ng sau:
            ```json
            {{
              "title": "Ch·ªß ƒë·ªÅ ch√≠nh",
              "children": [
                {{
                  "title": "√ù ch√≠nh 1",
                  "children": [
                    {{"title": "√ù ph·ª• 1.1"}},
                    {{"title": "√ù ph·ª• 1.2"}}
                  ]
                }},
                {{
                  "title": "√ù ch√≠nh 2",
                  "children": [
                    {{"title": "√ù ph·ª• 2.1"}},
                    {{"title": "√ù ph·ª• 2.2"}}
                  ]
                }}
              ]
            }}
            ```
            """

        # üìå G·ª≠i y√™u c·∫ßu ƒë·∫øn OpenAI API
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1500  # Gi·ªõi h·∫°n s·ªë token ƒë·ªÉ ƒë·∫£m b·∫£o ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß
        )

        # üìå L·∫•y n·ªôi dung ph·∫£n h·ªìi t·ª´ API
        summary_json = response.choices[0].message.content.strip()

        # üîç Lo·∫°i b·ªè d·∫•u ```json ... ```
        summary_json_cleaned = re.sub(r"```json|```", "", summary_json).strip()

        # üìå Chuy·ªÉn k·∫øt qu·∫£ t·ª´ chu·ªói JSON v·ªÅ d·∫°ng Python dictionary
        try:
            summary_dict = json.loads(summary_json_cleaned)
        except json.JSONDecodeError:
            return JsonResponse({"error": "OpenAI tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng ƒë√∫ng JSON", "raw_response": summary_json_cleaned}, status=500)

        return JsonResponse({"status": "success", "summary": summary_dict, "mode": mode}, json_dumps_params={'ensure_ascii': False})

    except json.JSONDecodeError:
        return JsonResponse({"error": "Invalid JSON format"}, status=400)
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)


from rest_framework import viewsets
from .models import UserDetail, ChuDe, File, DanhGia
from .serializers import UserDetailSerializer, ChuDeSerializer, FileSerializer, DanhGiaSerializer

class UserDetailViewSet(viewsets.ModelViewSet):
    queryset = UserDetail.objects.all()
    serializer_class = UserDetailSerializer

class ChuDeViewSet(viewsets.ModelViewSet):
    queryset = ChuDe.objects.all()
    serializer_class = ChuDeSerializer

class FileViewSet(viewsets.ModelViewSet):
    queryset = File.objects.all()
    serializer_class = FileSerializer

class DanhGiaViewSet(viewsets.ModelViewSet):
    queryset = DanhGia.objects.all()
    serializer_class = DanhGiaSerializer
